-Basis data
Toleransi kesalahan adalah properti yang memungkinkan sistem untuk terus beroperasi dengan baik jika terjadi kegagalan satu atau lebih kesalahan dalam beberapa komponennya. Jika kualitas operasinya menurun sama sekali, penurunan sebanding dengan tingkat keparahan kegagalan, dibandingkan dengan sistem yang dirancang secara naif, di mana bahkan kegagalan kecil dapat menyebabkan kerusakan total. Toleransi kesalahan sangat dicari dalam sistem ketersediaan tinggi , kritis misi , atau bahkan kritis kehidupan . Kemampuan mempertahankan fungsionalitas ketika bagian dari sistem rusak disebut sebagai degradasi yang anggun . [1]

Desain toleransi kesalahan memungkinkan sistem untuk melanjutkan operasi yang dimaksudkan, mungkin pada tingkat yang dikurangi, daripada gagal sepenuhnya, ketika beberapa bagian dari sistem gagal . [2] Istilah ini paling sering digunakan untuk menggambarkan sistem komputer yang dirancang untuk terus beroperasi kurang lebih sepenuhnya dengan, mungkin, pengurangan throughput atau peningkatan waktu respons jika terjadi beberapa kegagalan parsial. Artinya, sistem secara keseluruhan tidak berhenti karena masalah baik pada perangkat keras maupun perangkat lunaknya. Contoh di bidang lain adalah kendaraan bermotor yang dirancang agar tetap dapat dikendarai jika salah satu bannya bocor, atau struktur yang mampu mempertahankan keutuhannya dengan adanya kerusakan karena sebab-sebab seperti kelelahan , korosi , manufaktur. cacat, atau dampak.

Dalam lingkup sistem individu , toleransi kesalahan dapat dicapai dengan mengantisipasi kondisi luar biasa dan membangun sistem untuk mengatasinya, dan, secara umum, bertujuan untuk stabilisasi diri sehingga sistem menyatu menuju keadaan bebas kesalahan. Namun, jika konsekuensi dari kegagalan sistem adalah bencana besar, atau biaya untuk membuatnya cukup andal sangat tinggi, solusi yang lebih baik mungkin menggunakan beberapa bentuk duplikasi. Bagaimanapun, jika konsekuensi dari kegagalan sistem sangat fatal, sistem harus dapat menggunakan reversion untuk kembali ke mode aman. Ini mirip dengan pemulihan roll-back tetapi bisa menjadi tindakan manusia jika manusia hadir dalam loop.

-Sejarah
Komputer toleransi kesalahan pertama yang diketahui adalah SAPO , dibangun pada tahun 1951 di Cekoslowakia oleh Antonín Svoboda . [3] : 155  Desain dasarnya adalah drum magnetik yang dihubungkan melalui relai, dengan metode pemungutan suara untuk deteksi kesalahan memori ( redundansi modular rangkap tiga ). Beberapa mesin lain dikembangkan di sepanjang jalur ini, sebagian besar untuk penggunaan militer. Akhirnya, mereka dipisahkan menjadi tiga kategori berbeda: mesin yang akan bertahan lama tanpa perawatan apa pun, seperti yang digunakan pada wahana antariksa dan satelit NASA . ; komputer yang sangat dapat diandalkan tetapi memerlukan pemantauan terus-menerus, seperti yang digunakan untuk memantau dan mengendalikan pembangkit listrik tenaga nuklir atau eksperimen superkolider ; dan akhirnya, komputer dengan jumlah runtime tinggi yang akan banyak digunakan, seperti banyak superkomputer yang digunakan oleh perusahaan asuransi untuk pemantauan probabilitas mereka.

Sebagian besar pengembangan dalam apa yang disebut komputasi LLNM (Long Life, No Maintenance) dilakukan oleh NASA selama tahun 1960-an, [4] dalam persiapan untuk Proyek Apollo dan aspek penelitian lainnya. Mesin pertama NASA masuk ke observatorium luar angkasa , dan upaya kedua mereka, komputer JSTAR, digunakan di Voyager . Komputer ini memiliki cadangan susunan memori untuk menggunakan metode pemulihan memori dan oleh karena itu disebut komputer Pengujian-Dan-Perbaikan JPL. Itu bisa mendeteksi kesalahannya sendiri dan memperbaikinya atau memunculkan modul yang berlebihan sesuai kebutuhan. Komputer masih berfungsi, hingga awal 2022. [5]

Komputer yang sangat dapat diandalkan sebagian besar dipelopori oleh produsen pesawat terbang , [3] : 210  perusahaan tenaga nuklir , dan industri kereta api di Amerika Serikat. Ini membutuhkan komputer dengan waktu aktif dalam jumlah besar yang akan gagal dengan cukup anggun dengan kesalahan untuk memungkinkan operasi lanjutan sambil mengandalkan fakta bahwa output komputer akan terus dipantau oleh manusia untuk mendeteksi kesalahan. Sekali lagi, IBM mengembangkan komputer pertama semacam ini untuk NASA untuk panduan roket Saturn V , tetapi kemudian BNSF , Unisys , dan General Electric membangun sendiri. [3] : 223 

Pada tahun 1970-an, banyak pekerjaan telah terjadi di lapangan . [6] [7] [8] Misalnya, F14 CADC memiliki self-test dan redundansi bawaan. [9]

Secara umum, upaya awal pada desain toleransi kesalahan difokuskan terutama pada diagnosis internal, di mana kesalahan akan menunjukkan ada sesuatu yang gagal dan seorang pekerja dapat menggantinya. SAPO, misalnya, memiliki metode dimana drum memori yang rusak akan mengeluarkan suara sebelum kegagalan. [10] Upaya selanjutnya menunjukkan bahwa agar sepenuhnya efektif, sistem harus memperbaiki sendiri dan mendiagnosis – mengisolasi kesalahan dan kemudian menerapkan cadangan yang berlebihan sambil mengingatkan perlunya perbaikan. Ini dikenal sebagai redundansi model-N, di mana kesalahan menyebabkan brankas otomatis dan peringatan kepada operator, dan ini masih merupakan bentuk paling umum dari desain toleransi kesalahan tingkat satu yang digunakan saat ini.

Pemungutan suara adalah metode awal lainnya, seperti yang dibahas di atas, dengan beberapa pencadangan redundan yang beroperasi terus-menerus dan memeriksa hasil satu sama lain, dengan hasil jika, misalnya, empat komponen melaporkan jawaban 5 dan satu komponen melaporkan jawaban 6, empat lainnya akan "memilih" bahwa komponen kelima rusak dan tidak berfungsi. Ini disebut M dari N suara mayoritas.

Secara historis, gerakan selalu bergerak lebih jauh dari model-N dan lebih ke M keluar dari N karena fakta bahwa kompleksitas sistem dan kesulitan memastikan keadaan transitif dari kesalahan-negatif ke kesalahan-positif tidak mengganggu operasi. .

Tandem dan Stratus termasuk di antara perusahaan pertama yang mengkhususkan diri dalam desain sistem komputer yang toleran terhadap kesalahan untuk pemrosesan transaksi online .


-Contoh 
Toleransi kesalahan perangkat keras terkadang mengharuskan bagian yang rusak dikeluarkan dan diganti dengan bagian baru saat sistem masih beroperasi (dalam komputasi dikenal sebagai hot swapping ). Sistem seperti itu diimplementasikan dengan satu cadangan dikenal sebagai toleran titik tunggal dan mewakili sebagian besar sistem toleran kesalahan. Dalam sistem seperti itu, waktu rata-rata antara kegagalan harus cukup lama bagi operator untuk memiliki waktu yang cukup untuk memperbaiki perangkat yang rusak ( waktu rata-rata untuk memperbaiki ) sebelum pencadangan juga gagal. Akan sangat membantu jika waktu antara kegagalan selama mungkin, tetapi ini tidak secara khusus diperlukan dalam sistem yang toleran terhadap kesalahan.

Toleransi kesalahan terutama berhasil dalam aplikasi komputer. Tandem Computers membangun seluruh bisnis mereka pada mesin tersebut, yang menggunakan toleransi satu titik untuk membuat sistem NonStop mereka dengan waktu aktif yang diukur dalam tahun.

Arsitektur fail-safe dapat mencakup juga perangkat lunak komputer, misalnya dengan replikasi proses .

Format data juga dapat dirancang untuk diturunkan dengan anggun. HTML misalnya, dirancang untuk kompatibel ke depan , memungkinkan browser Web mengabaikan entitas HTML baru dan yang tidak didukung tanpa menyebabkan dokumen tidak dapat digunakan. Selain itu, beberapa situs, termasuk platform populer seperti Twitter (hingga Desember 2020), menyediakan front end ringan opsional yang tidak bergantung pada JavaScript dan memiliki tata letak minimal , untuk memastikan aksesibilitas dan jangkauan yang luas , seperti pada konsol game dengan web terbatas kemampuan menjelajah.

-Terminologi
Sistem yang sangat toleran terhadap kesalahan mungkin berlanjut pada tingkat kinerja yang sama meskipun satu atau lebih komponen gagal. Misalnya, sebuah bangunan dengan generator listrik cadangan akan memberikan tegangan yang sama ke stopkontak bahkan jika jaringan listrik mati.

Sebuah sistem yang dirancang untuk gagal aman , atau gagal-aman, atau gagal anggun , apakah itu berfungsi pada tingkat yang dikurangi atau gagal sepenuhnya, melakukannya dengan cara yang melindungi orang, properti, atau data dari cedera, kerusakan, intrusi, atau penyingkapan. Di komputer, sebuah program mungkin gagal-aman dengan mengeksekusi keluar anggun (sebagai lawan dari crash yang tidak terkendali) untuk mencegah korupsi data setelah mengalami kesalahan. Perbedaan serupa dibuat antara "gagal dengan baik" dan " gagal dengan buruk ".

Gagal-mematikan adalah strategi sebaliknya, yang dapat digunakan dalam sistem senjata yang dirancang untuk membunuh atau melukai target bahkan jika bagian dari sistem rusak atau hancur.

Sebuah sistem yang dirancang untuk mengalami degradasi anggun , atau gagal lunak (digunakan dalam komputasi, mirip dengan "fail safe" [13] ) beroperasi pada tingkat kinerja yang berkurang setelah beberapa kegagalan komponen. Misalnya, sebuah bangunan dapat mengoperasikan penerangan pada tingkat yang lebih rendah dan elevator pada kecepatan yang dikurangi jika daya jaringan mati, daripada menjebak orang dalam kegelapan sepenuhnya atau terus beroperasi dengan daya penuh. Dalam menghitung contoh degradasi yang anggun adalah jika bandwidth jaringan tidak mencukupi untuk streaming video online, versi resolusi lebih rendah mungkin dialirkan menggantikan versi resolusi tinggi. Peningkatan progresifadalah contoh dalam komputasi, di mana halaman web tersedia dalam format fungsional dasar untuk browser web lama, layar kecil, atau kemampuan terbatas, tetapi dalam versi yang disempurnakan untuk browser yang mampu menangani teknologi tambahan atau yang memiliki tampilan yang lebih besar.

Dalam sistem komputer yang toleran terhadap kesalahan , program yang dianggap kuat dirancang untuk melanjutkan operasi meskipun ada kesalahan, pengecualian, atau masukan yang tidak valid, alih-alih mogok sepenuhnya. Kerapuhan perangkat lunak adalah kebalikan dari kekokohan. Jaringan tangguh terus mengirimkan data meskipun beberapa tautan atau node mengalami kegagalan; bangunan dan infrastruktur yang tangguh juga diharapkan dapat mencegah kegagalan total dalam situasi seperti gempa bumi, banjir, atau tabrakan.

Sistem dengan transparansi kegagalan yang tinggi akan mengingatkan pengguna bahwa telah terjadi kegagalan komponen, bahkan jika sistem tersebut terus beroperasi dengan kinerja penuh, sehingga kegagalan dapat diperbaiki atau kegagalan total yang akan segera diantisipasi. [14] Demikian juga, komponen fail-fast dirancang untuk melaporkan pada titik kegagalan pertama, daripada membiarkan komponen hilir gagal dan kemudian menghasilkan laporan. Hal ini memungkinkan diagnosis yang lebih mudah dari masalah yang mendasarinya, dan dapat mencegah pengoperasian yang tidak benar dalam keadaan rusak.

-Kondisi kesalahan tunggal 
Kondisi gangguan tunggal adalah situasi di mana salah satu sarana untuk perlindungan terhadap bahaya rusak. Jika suatu kondisi gangguan tunggal menghasilkan kondisi gangguan tunggal yang tidak dapat dihindari, kedua kegagalan tersebut dianggap sebagai satu kondisi gangguan tunggal. [15] Sebuah sumber menawarkan contoh berikut:

Kondisi gangguan tunggal adalah kondisi ketika sarana tunggal untuk proteksi terhadap bahaya pada peralatan rusak atau terdapat satu kondisi abnormal eksternal, misalnya hubung singkat antara bagian aktif dan bagian yang dipasang.


-Kriteria 
Menyediakan desain yang toleran terhadap kesalahan untuk setiap komponen biasanya bukan pilihan. Redundansi terkait membawa sejumlah hukuman: peningkatan berat, ukuran, konsumsi daya, biaya, serta waktu untuk merancang, memverifikasi, dan menguji. Oleh karena itu, sejumlah pilihan harus diperiksa untuk menentukan komponen mana yang harus toleran terhadap kesalahan: [17]

Seberapa penting komponen tersebut? Di dalam mobil, radio tidak kritis, sehingga komponen ini kurang membutuhkan toleransi kesalahan.
Seberapa besar kemungkinan komponen tersebut gagal? Beberapa komponen, seperti poros penggerak di dalam mobil, kemungkinan besar tidak akan rusak, jadi tidak diperlukan toleransi kesalahan.
Seberapa mahal untuk membuat komponen toleran kesalahan? Membutuhkan mesin mobil yang berlebihan, misalnya, kemungkinan akan terlalu mahal baik secara ekonomi maupun dalam hal berat dan ruang, untuk dipertimbangkan.
Contoh komponen yang lolos semua pengujian adalah sistem pengendalian penumpang mobil. Meskipun kami biasanya tidak memikirkan sistem penahan penumpang utama , itu adalah gravitasi . Jika kendaraan terguling atau mengalami gaya g yang parah, maka metode utama pengendalian penumpang ini mungkin gagal. Menahan penumpang selama kecelakaan seperti itu sangat penting untuk keselamatan, jadi kami lulus tes pertama. Kecelakaan yang menyebabkan penumpang terlontar cukup sering terjadi sebelum sabuk pengaman , jadi kami lulus tes kedua. Biaya metode pengekangan berlebihan seperti sabuk pengaman cukup rendah, baik secara ekonomi maupun dalam hal berat dan ruang, jadi kami lulus tes ketiga. Oleh karena itu, menambahkan sabuk pengaman ke semua kendaraan adalah ide yang bagus. "Sistem pengekangan tambahan" lainnya, sepertiairbag , lebih mahal dan lulus tes itu dengan margin yang lebih kecil.

Contoh lain yang sangat baik dan jangka panjang dari prinsip ini yang dipraktikkan adalah sistem pengereman: sementara mekanisme rem yang sebenarnya sangat penting, mereka tidak terlalu rentan terhadap kegagalan mendadak (bukan progresif), dan dalam hal apa pun harus diduplikasi untuk memungkinkan penerapan gaya rem yang merata dan seimbang ke semua roda. Juga akan sangat mahal untuk menggandakan lebih lanjut komponen utama dan mereka akan menambah bobot yang cukup besar. Namun, sistem kritis yang sama untuk menggerakkan rem di bawah kendali pengemudi secara inheren kurang kuat, umumnya menggunakan kabel (dapat berkarat, meregang, macet, patah) atau cairan hidrolik (dapat bocor, mendidih dan menimbulkan gelembung, menyerap air dan dengan demikian kehilangan efektivitasnya. ). Jadi di sebagian besar mobil modern, sirkuit rem hidrolik rem kaki dibagi secara diagonal untuk memberikan dua titik kegagalan yang lebih kecil, hilangnya baik hanya mengurangi daya rem sebesar 50% dan tidak menyebabkan ketidakseimbangan kekuatan rem yang berbahaya seperti split depan-belakang atau kiri-kanan yang lurus, dan jika sirkuit hidrolik gagal total (kejadian yang relatif sangat jarang), ada failsafe dalam bentuk rem parkir yang digerakkan kabel yang mengoperasikan rem belakang yang relatif lemah, tetapi masih dapat menghentikan kendaraan dengan aman bersama dengan pengereman transmisi/mesin selama tuntutannya sesuai dengan arus lalu lintas normal . Kombinasi yang tidak mungkin secara kumulatif dari kegagalan total rem kaki dengan kebutuhan untuk pengereman yang keras dalam keadaan darurat kemungkinan besar akan mengakibatkan tabrakan, tetapi tetap saja tabrakan dengan kecepatan lebih rendah daripada yang seharusnya terjadi. ada failsafe dalam bentuk rem parkir yang digerakkan kabel yang mengoperasikan rem belakang yang relatif lemah, tetapi masih dapat membuat kendaraan berhenti dengan aman bersamaan dengan pengereman transmisi/mesin selama tuntutannya sesuai dengan arus lalu lintas normal. Kombinasi yang tidak mungkin secara kumulatif dari kegagalan total rem kaki dengan kebutuhan untuk pengereman yang keras dalam keadaan darurat kemungkinan besar akan mengakibatkan tabrakan, tetapi tetap saja tabrakan dengan kecepatan lebih rendah daripada yang seharusnya terjadi. ada failsafe dalam bentuk rem parkir yang digerakkan kabel yang mengoperasikan rem belakang yang relatif lemah, tetapi masih dapat membuat kendaraan berhenti dengan aman bersamaan dengan pengereman transmisi/mesin selama tuntutannya sesuai dengan arus lalu lintas normal. Kombinasi yang tidak mungkin secara kumulatif dari kegagalan total rem kaki dengan kebutuhan untuk pengereman yang keras dalam keadaan darurat kemungkinan besar akan mengakibatkan tabrakan, tetapi tetap saja tabrakan dengan kecepatan lebih rendah daripada yang seharusnya terjadi.

Dibandingkan dengan rem servis yang diaktifkan pedal kaki, rem parkir itu sendiri adalah item yang kurang penting, dan kecuali digunakan sebagai cadangan satu kali untuk rem kaki, tidak akan menimbulkan bahaya langsung jika ditemukan tidak berfungsi di saat aplikasi. Oleh karena itu, tidak ada redundansi yang terpasang di dalamnya (dan biasanya menggunakan sistem penggerak kabel yang lebih murah, lebih ringan, tetapi kurang tahan pakai), dan jika ini terjadi di tanjakan, cukup gunakan rem kaki untuk menahan kendaraan sejenak. , sebelum mengemudi untuk menemukan jalan datar untuk berhenti. Atau, pada kemiringan yang dangkal, transmisi dapat digeser ke gigi Park, Reverse atau First, dan kunci transmisi / kompresi mesin digunakan untuk menahannya, karena mereka tidak perlu menyertakan kecanggihan untuk menghentikannya terlebih dahulu. .

Pada sepeda motor, tingkat keamanan kegagalan yang serupa disediakan dengan metode yang lebih sederhana; pertama sistem rem depan dan belakang yang sepenuhnya terpisah, terlepas dari metode aktivasi mereka (yang dapat berupa kabel, batang atau hidrolik), memungkinkan salah satu untuk gagal sepenuhnya sementara membiarkan yang lain tidak terpengaruh. Kedua, rem belakang relatif kuat dibandingkan dengan sepupu otomotifnya, bahkan menjadi cakram yang kuat pada model sport, meskipun tujuan biasanya adalah agar sistem depan memberikan sebagian besar gaya pengereman; karena bobot kendaraan secara keseluruhan lebih terpusat, ban belakang umumnya lebih besar dan lebih mencengkeram, dan pengendara dapat bersandar untuk memberi bobot lebih pada ban, sehingga memungkinkan lebih banyak gaya rem untuk diterapkan sebelum roda terkunci. Pada mesin kelas utilitas yang lebih murah dan lebih lambat,

-Persyaratan 
Karakteristik dasar toleransi kesalahan memerlukan:

Tidak ada titik kegagalan tunggal – Jika suatu sistem mengalami kegagalan, sistem harus terus beroperasi tanpa gangguan selama proses perbaikan.
Isolasi kesalahan ke komponen yang gagal – Ketika terjadi kegagalan, sistem harus dapat mengisolasi kegagalan ke komponen yang melanggar. Ini memerlukan penambahan mekanisme deteksi kegagalan khusus yang hanya ada untuk tujuan isolasi kesalahan. Pemulihan dari kondisi kesalahan memerlukan pengklasifikasian kesalahan atau komponen yang gagal. Institut Nasional Standar dan Teknologi (NIST) mengkategorikan kesalahan berdasarkan lokalitas, penyebab, durasi, dan efek. [ dimana? ] [ diperlukan klarifikasi ]
Penahanan kesalahan untuk mencegah penyebaran kegagalan – Beberapa mekanisme kegagalan dapat menyebabkan sistem gagal dengan menyebarkan kegagalan ke seluruh sistem. Contoh dari jenis kegagalan ini adalah "pemancar nakal" yang dapat membanjiri komunikasi yang sah dalam suatu sistem dan menyebabkan kegagalan sistem secara keseluruhan. Diperlukan firewall atau mekanisme lain yang mengisolasi pemancar jahat atau komponen yang gagal untuk melindungi sistem.
Ketersediaan mode reversi [ klarifikasi diperlukan ]
Selain itu, sistem toleransi kesalahan dicirikan dalam hal pemadaman layanan yang direncanakan dan pemadaman layanan yang tidak direncanakan. Ini biasanya diukur pada tingkat aplikasi dan tidak hanya pada tingkat perangkat keras. Angka prestasi disebut ketersediaan dan dinyatakan sebagai persentase. Misalnya, sistem lima sembilan secara statistik akan memberikan ketersediaan 99,999%.

Sistem toleransi kesalahan biasanya didasarkan pada konsep redundansi.

-Teknik toleransi kesalahan 
Penelitian tentang jenis toleransi yang diperlukan untuk sistem kritis melibatkan sejumlah besar pekerjaan interdisipliner. Semakin kompleks sistem, semakin hati-hati semua kemungkinan interaksi harus dipertimbangkan dan dipersiapkan. Mempertimbangkan pentingnya sistem bernilai tinggi dalam transportasi, utilitas publik dan militer, bidang topik yang menyentuh penelitian sangat luas: dapat mencakup subjek yang jelas seperti pemodelan dan keandalan perangkat lunak, atau desain perangkat keras , hingga elemen misterius seperti model stokastik , teori grafik , logika formal atau eksklusif, pemrosesan paralel , transmisi data jarak jauh , dan banyak lagi.

-Replikasi 
Komponen cadangan mengatasi karakteristik dasar pertama dari toleransi kesalahan dalam tiga cara:

Replikasi : Menyediakan beberapa contoh identik dari sistem atau subsistem yang sama, mengarahkan tugas atau permintaan ke semuanya secara paralel , dan memilih hasil yang benar berdasarkan kuorum ;
Redundansi : Menyediakan beberapa instance identik dari sistem yang sama dan beralih ke salah satu instance yang tersisa jika terjadi kegagalan ( failover );
Keragaman: Menyediakan beberapa implementasi berbeda dari spesifikasi yang sama, dan menggunakannya seperti sistem yang direplikasi untuk mengatasi kesalahan dalam implementasi tertentu.
Semua implementasi RAID , array disk independen yang berlebihan , kecuali RAID 0, adalah contoh perangkat penyimpanan yang toleran terhadap kesalahan yang menggunakan redundansi data .

Mesin toleran kesalahan lockstep menggunakan elemen yang direplikasi yang beroperasi secara paralel. Setiap saat, semua ulangan dari setiap elemen harus dalam keadaan yang sama. Masukan yang sama disediakan untuk setiap replikasi , dan keluaran yang sama diharapkan. Keluaran dari ulangan dibandingkan dengan menggunakan rangkaian voting. Sebuah mesin dengan dua ulangan dari setiap elemen disebut dual modular redundant (DMR). Sirkuit pemungutan suara kemudian hanya dapat mendeteksi ketidakcocokan dan pemulihan bergantung pada metode lain. Sebuah mesin dengan tiga ulangan dari setiap elemen disebut triple modular redundant(TMR). Sirkuit pemungutan suara dapat menentukan replikasi mana yang salah ketika pemungutan suara dua-ke-satu diamati. Dalam hal ini, rangkaian pemungutan suara dapat menampilkan hasil yang benar, dan membuang versi yang salah. Setelah ini, keadaan internal dari replikasi yang salah diasumsikan berbeda dari dua lainnya, dan sirkuit pemungutan suara dapat beralih ke mode DMR. Model ini dapat diterapkan untuk jumlah ulangan yang lebih besar.

Mesin toleran kesalahan Lockstep paling mudah dibuat sepenuhnya sinkron , dengan setiap gerbang dari setiap replikasi membuat transisi status yang sama pada tepi jam yang sama, dan jam ke replikasi berada dalam fase yang tepat. Namun, dimungkinkan untuk membangun sistem lockstep tanpa persyaratan ini.

Membawa replikasi ke dalam sinkron membutuhkan membuat status tersimpan internalnya sama. Mereka dapat dimulai dari keadaan awal yang tetap, seperti keadaan reset. Atau, keadaan internal satu replika dapat disalin ke replika lain.

Salah satu varian DMR adalah pair-and-spare . Dua elemen yang direplikasi beroperasi di lockstep sebagai pasangan, dengan sirkuit pemungutan suara yang mendeteksi ketidakcocokan antara operasi mereka dan mengeluarkan sinyal yang menunjukkan bahwa ada kesalahan. Pasangan lain beroperasi dengan cara yang persis sama. Sirkuit terakhir memilih output dari pasangan yang tidak menyatakan bahwa itu salah. Pair-and-spare membutuhkan empat replika daripada tiga TMR, tetapi telah digunakan secara komersial.

Komputasi yang tidak menyadari kegagalan 
Komputasi yang tidak menyadari kegagalan adalah teknik yang memungkinkan program komputer untuk terus dieksekusi meskipun ada kesalahan . [19] Teknik ini dapat diterapkan dalam konteks yang berbeda. Pertama, ia dapat menangani pembacaan memori yang tidak valid dengan mengembalikan nilai yang dibuat ke program, [20] yang pada gilirannya, memanfaatkan nilai yang dibuat dan mengabaikan nilai memori sebelumnya yang coba diaksesnya, ini sangat kontras dengan pemeriksa memori biasa . , yang menginformasikan program tentang kesalahan atau membatalkan program. Kedua, ini dapat diterapkan pada pengecualian di mana beberapa blok tangkapan ditulis atau disintesis untuk menangkap pengecualian yang tidak terduga. [21]Selain itu, terjadi bahwa eksekusi dimodifikasi beberapa kali berturut-turut, untuk mencegah kegagalan cascading. [22]

Pendekatan ini memiliki biaya kinerja: karena teknik ini menulis ulang kode untuk menyisipkan pemeriksaan dinamis untuk validitas alamat, waktu eksekusi akan meningkat sebesar 80% hingga 500%.

-Penggembalaan pemulihan 
Penggembalaan pemulihan adalah teknik ringan untuk memungkinkan program perangkat lunak pulih dari kesalahan fatal seperti dereferensi penunjuk nol dan membagi dengan nol. [24] Dibandingkan dengan teknik komputasi yang tidak menyadari kegagalan, penggembalaan pemulihan bekerja pada biner program yang dikompilasi secara langsung dan tidak perlu dikompilasi ulang ke program.

Ia menggunakan kerangka instrumentasi biner just-in-time Pin . Itu menempel pada proses aplikasi ketika terjadi kesalahan, memperbaiki eksekusi, melacak efek perbaikan saat eksekusi berlanjut, berisi efek perbaikan dalam proses aplikasi, dan terlepas dari proses setelah semua efek perbaikan dihapus dari status proses. Itu tidak mengganggu eksekusi normal program dan karenanya menimbulkan overhead yang dapat diabaikan. [24] Untuk 17 dari 18 kesalahan nol-dereferensi dan pembagian-dengan-nol dunia nyata yang dikumpulkan secara sistematis, implementasi prototipe memungkinkan aplikasi untuk terus mengeksekusi untuk memberikan keluaran dan layanan yang dapat diterima kepada penggunanya pada masukan pemicu kesalahan. [24]

Pemutus sirkuit 
Artikel utama: Pola desain pemutus sirkuit
Pola desain pemutus sirkuit adalah teknik untuk menghindari kegagalan bencana dalam sistem terdistribusi.

Redundansi 
Artikel utama: Redundansi (rekayasa)
Redundansi adalah penyediaan kemampuan fungsional yang tidak diperlukan dalam lingkungan bebas kesalahan. [25] Ini dapat terdiri dari komponen cadangan yang secara otomatis "menendang" jika salah satu komponen gagal. Misalnya, truk kargo besar dapat kehilangan ban tanpa konsekuensi besar. Mereka memiliki banyak ban, dan tidak ada satu ban pun yang kritis (dengan pengecualian ban depan, yang digunakan untuk mengemudi, tetapi umumnya membawa lebih sedikit beban, masing-masing dan secara total, daripada empat hingga 16 lainnya, sehingga kecil kemungkinannya untuk gagal. ). Gagasan menggabungkan redundansi untuk meningkatkan keandalan sistem dipelopori oleh John von Neumann pada 1950-an. [26]

Dua jenis redundansi yang mungkin: [27] redundansi ruang dan redundansi waktu. Redundansi ruang menyediakan komponen, fungsi, atau item data tambahan yang tidak diperlukan untuk operasi bebas kesalahan. Redundansi ruang diklasifikasikan lebih lanjut menjadi perangkat keras, perangkat lunak, dan redundansi informasi, tergantung pada jenis sumber daya redundan yang ditambahkan ke sistem. Dalam redundansi waktu, komputasi atau transmisi data diulang dan hasilnya dibandingkan dengan salinan tersimpan dari hasil sebelumnya. Terminologi saat ini untuk jenis pengujian ini disebut sebagai 'In Service Fault Tolerance Testing atau disingkat ISFTT.

Kekurangan 
Keuntungan desain yang toleran terhadap kesalahan sudah jelas, sementara banyak kelemahannya tidak:

Gangguan dengan deteksi kesalahan pada komponen yang sama. Untuk melanjutkan contoh kendaraan penumpang di atas, dengan salah satu sistem toleransi kesalahan mungkin tidak jelas bagi pengemudi ketika ban bocor. Ini biasanya ditangani dengan "sistem deteksi kesalahan otomatis" yang terpisah. Dalam hal ban, monitor tekanan udara mendeteksi hilangnya tekanan dan memberi tahu pengemudi. Alternatifnya adalah "sistem deteksi kesalahan manual", seperti memeriksa semua ban secara manual di setiap pemberhentian.
Gangguan dengan deteksi kesalahan di komponen lain. Variasi lain dari masalah ini adalah ketika toleransi kesalahan dalam satu komponen mencegah deteksi kesalahan pada komponen yang berbeda. Misalnya, jika komponen B melakukan beberapa operasi berdasarkan output dari komponen A, maka toleransi kesalahan di B dapat menyembunyikan masalah dengan A. Jika komponen B kemudian diubah (ke desain yang kurang toleran terhadap kesalahan) sistem mungkin gagal tiba-tiba, membuatnya tampak bahwa komponen B yang baru adalah masalahnya. Hanya setelah sistem diperiksa dengan cermat, akan menjadi jelas bahwa akar masalah sebenarnya ada pada komponen A.
Pengurangan prioritas koreksi kesalahan. Bahkan jika operator mengetahui adanya kesalahan, memiliki sistem yang toleran terhadap kesalahan kemungkinan akan mengurangi pentingnya memperbaiki kesalahan tersebut. Jika kesalahan tidak diperbaiki, ini pada akhirnya akan menyebabkan kegagalan sistem, ketika komponen yang toleran kesalahan gagal sepenuhnya atau ketika semua komponen yang berlebihan juga gagal.
Kesulitan tes. Untuk sistem toleransi kesalahan kritis tertentu, seperti reaktor nuklir , tidak ada cara mudah untuk memverifikasi bahwa komponen cadangan berfungsi. Contoh paling terkenal dari hal ini adalah Chernobyl , di mana operator menguji pendinginan cadangan darurat dengan menonaktifkan pendinginan primer dan sekunder. Pencadangan gagal, mengakibatkan kehancuran inti dan pelepasan radiasi besar-besaran.
Biaya. Baik komponen yang toleran terhadap kesalahan maupun komponen yang berlebihan cenderung meningkatkan biaya. Ini bisa menjadi biaya ekonomi murni atau dapat mencakup ukuran lain, seperti berat. Pesawat ruang angkasa berawak , misalnya, memiliki begitu banyak komponen yang redundan dan toleran terhadap kesalahan sehingga bobotnya meningkat secara dramatis dibandingkan sistem tak berawak, yang tidak memerlukan tingkat keamanan yang sama.
Komponen yang lebih rendah. Desain yang toleran terhadap kesalahan memungkinkan penggunaan komponen yang lebih rendah, yang sebaliknya akan membuat sistem tidak dapat dioperasikan. Meskipun praktik ini memiliki potensi untuk mengurangi kenaikan biaya, penggunaan beberapa komponen yang lebih rendah dapat menurunkan keandalan sistem ke tingkat yang sama dengan, atau bahkan lebih buruk daripada, sistem yang tidak toleran terhadap kesalahan yang sebanding.

-Istilah terkait 
Ada perbedaan antara toleransi kesalahan dan sistem yang jarang bermasalah. Misalnya, sistem palang Western Electric memiliki tingkat kegagalan dua jam per empat puluh tahun, dan oleh karena itu sangat tahan terhadap kesalahan . Tetapi ketika terjadi kesalahan, mereka masih berhenti beroperasi sepenuhnya, dan oleh karena itu tidak toleran terhadap kesalahan .

-